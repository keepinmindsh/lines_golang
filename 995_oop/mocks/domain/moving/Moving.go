// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	moving "design_pattern/oop/domain/moving"

	mock "github.com/stretchr/testify/mock"
)

// Moving is an autogenerated mock type for the Moving type
type Moving struct {
	mock.Mock
}

type Moving_Expecter struct {
	mock *mock.Mock
}

func (_m *Moving) EXPECT() *Moving_Expecter {
	return &Moving_Expecter{mock: &_m.Mock}
}

// Move provides a mock function with given fields: order
func (_m *Moving) Move(order moving.MoveOrder) {
	_m.Called(order)
}

// Moving_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type Moving_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - order moving.MoveOrder
func (_e *Moving_Expecter) Move(order interface{}) *Moving_Move_Call {
	return &Moving_Move_Call{Call: _e.mock.On("Move", order)}
}

func (_c *Moving_Move_Call) Run(run func(order moving.MoveOrder)) *Moving_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(moving.MoveOrder))
	})
	return _c
}

func (_c *Moving_Move_Call) Return() *Moving_Move_Call {
	_c.Call.Return()
	return _c
}

func (_c *Moving_Move_Call) RunAndReturn(run func(moving.MoveOrder)) *Moving_Move_Call {
	_c.Call.Return(run)
	return _c
}

// NewMoving creates a new instance of Moving. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMoving(t interface {
	mock.TestingT
	Cleanup(func())
}) *Moving {
	mock := &Moving{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
