// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	steering "design_pattern/oop/domain/steering"

	mock "github.com/stretchr/testify/mock"
)

// Car is an autogenerated mock type for the Car type
type Car struct {
	mock.Mock
}

type Car_Expecter struct {
	mock *mock.Mock
}

func (_m *Car) EXPECT() *Car_Expecter {
	return &Car_Expecter{mock: &_m.Mock}
}

// Backward provides a mock function with given fields:
func (_m *Car) Backward() {
	_m.Called()
}

// Car_Backward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Backward'
type Car_Backward_Call struct {
	*mock.Call
}

// Backward is a helper method to define mock.On call
func (_e *Car_Expecter) Backward() *Car_Backward_Call {
	return &Car_Backward_Call{Call: _e.mock.On("Backward")}
}

func (_c *Car_Backward_Call) Run(run func()) *Car_Backward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Car_Backward_Call) Return() *Car_Backward_Call {
	_c.Call.Return()
	return _c
}

func (_c *Car_Backward_Call) RunAndReturn(run func()) *Car_Backward_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentVector provides a mock function with given fields:
func (_m *Car) CurrentVector() steering.Vector {
	ret := _m.Called()

	var r0 steering.Vector
	if rf, ok := ret.Get(0).(func() steering.Vector); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(steering.Vector)
	}

	return r0
}

// Car_CurrentVector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentVector'
type Car_CurrentVector_Call struct {
	*mock.Call
}

// CurrentVector is a helper method to define mock.On call
func (_e *Car_Expecter) CurrentVector() *Car_CurrentVector_Call {
	return &Car_CurrentVector_Call{Call: _e.mock.On("CurrentVector")}
}

func (_c *Car_CurrentVector_Call) Run(run func()) *Car_CurrentVector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Car_CurrentVector_Call) Return(_a0 steering.Vector) *Car_CurrentVector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Car_CurrentVector_Call) RunAndReturn(run func() steering.Vector) *Car_CurrentVector_Call {
	_c.Call.Return(run)
	return _c
}

// Forward provides a mock function with given fields:
func (_m *Car) Forward() {
	_m.Called()
}

// Car_Forward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Forward'
type Car_Forward_Call struct {
	*mock.Call
}

// Forward is a helper method to define mock.On call
func (_e *Car_Expecter) Forward() *Car_Forward_Call {
	return &Car_Forward_Call{Call: _e.mock.On("Forward")}
}

func (_c *Car_Forward_Call) Run(run func()) *Car_Forward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Car_Forward_Call) Return() *Car_Forward_Call {
	_c.Call.Return()
	return _c
}

func (_c *Car_Forward_Call) RunAndReturn(run func()) *Car_Forward_Call {
	_c.Call.Return(run)
	return _c
}

// LeftDiagonal provides a mock function with given fields:
func (_m *Car) LeftDiagonal() {
	_m.Called()
}

// Car_LeftDiagonal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeftDiagonal'
type Car_LeftDiagonal_Call struct {
	*mock.Call
}

// LeftDiagonal is a helper method to define mock.On call
func (_e *Car_Expecter) LeftDiagonal() *Car_LeftDiagonal_Call {
	return &Car_LeftDiagonal_Call{Call: _e.mock.On("LeftDiagonal")}
}

func (_c *Car_LeftDiagonal_Call) Run(run func()) *Car_LeftDiagonal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Car_LeftDiagonal_Call) Return() *Car_LeftDiagonal_Call {
	_c.Call.Return()
	return _c
}

func (_c *Car_LeftDiagonal_Call) RunAndReturn(run func()) *Car_LeftDiagonal_Call {
	_c.Call.Return(run)
	return _c
}

// RightDiagonal provides a mock function with given fields:
func (_m *Car) RightDiagonal() {
	_m.Called()
}

// Car_RightDiagonal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RightDiagonal'
type Car_RightDiagonal_Call struct {
	*mock.Call
}

// RightDiagonal is a helper method to define mock.On call
func (_e *Car_Expecter) RightDiagonal() *Car_RightDiagonal_Call {
	return &Car_RightDiagonal_Call{Call: _e.mock.On("RightDiagonal")}
}

func (_c *Car_RightDiagonal_Call) Run(run func()) *Car_RightDiagonal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Car_RightDiagonal_Call) Return() *Car_RightDiagonal_Call {
	_c.Call.Return()
	return _c
}

func (_c *Car_RightDiagonal_Call) RunAndReturn(run func()) *Car_RightDiagonal_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *Car) Start() {
	_m.Called()
}

// Car_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Car_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *Car_Expecter) Start() *Car_Start_Call {
	return &Car_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *Car_Start_Call) Run(run func()) *Car_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Car_Start_Call) Return() *Car_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *Car_Start_Call) RunAndReturn(run func()) *Car_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Car) Stop() {
	_m.Called()
}

// Car_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Car_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Car_Expecter) Stop() *Car_Stop_Call {
	return &Car_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Car_Stop_Call) Run(run func()) *Car_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Car_Stop_Call) Return() *Car_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *Car_Stop_Call) RunAndReturn(run func()) *Car_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Strait provides a mock function with given fields:
func (_m *Car) Strait() {
	_m.Called()
}

// Car_Strait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Strait'
type Car_Strait_Call struct {
	*mock.Call
}

// Strait is a helper method to define mock.On call
func (_e *Car_Expecter) Strait() *Car_Strait_Call {
	return &Car_Strait_Call{Call: _e.mock.On("Strait")}
}

func (_c *Car_Strait_Call) Run(run func()) *Car_Strait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Car_Strait_Call) Return() *Car_Strait_Call {
	_c.Call.Return()
	return _c
}

func (_c *Car_Strait_Call) RunAndReturn(run func()) *Car_Strait_Call {
	_c.Call.Return(run)
	return _c
}

// NewCar creates a new instance of Car. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCar(t interface {
	mock.TestingT
	Cleanup(func())
}) *Car {
	mock := &Car{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
