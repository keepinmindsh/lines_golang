// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	steering "design_pattern/oop/domain/steering"

	mock "github.com/stretchr/testify/mock"
)

// Steering is an autogenerated mock type for the Steering type
type Steering struct {
	mock.Mock
}

type Steering_Expecter struct {
	mock *mock.Mock
}

func (_m *Steering) EXPECT() *Steering_Expecter {
	return &Steering_Expecter{mock: &_m.Mock}
}

// CurrentVector provides a mock function with given fields:
func (_m *Steering) CurrentVector() steering.Vector {
	ret := _m.Called()

	var r0 steering.Vector
	if rf, ok := ret.Get(0).(func() steering.Vector); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(steering.Vector)
	}

	return r0
}

// Steering_CurrentVector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentVector'
type Steering_CurrentVector_Call struct {
	*mock.Call
}

// CurrentVector is a helper method to define mock.On call
func (_e *Steering_Expecter) CurrentVector() *Steering_CurrentVector_Call {
	return &Steering_CurrentVector_Call{Call: _e.mock.On("CurrentVector")}
}

func (_c *Steering_CurrentVector_Call) Run(run func()) *Steering_CurrentVector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Steering_CurrentVector_Call) Return(_a0 steering.Vector) *Steering_CurrentVector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Steering_CurrentVector_Call) RunAndReturn(run func() steering.Vector) *Steering_CurrentVector_Call {
	_c.Call.Return(run)
	return _c
}

// LeftDiagonal provides a mock function with given fields:
func (_m *Steering) LeftDiagonal() {
	_m.Called()
}

// Steering_LeftDiagonal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeftDiagonal'
type Steering_LeftDiagonal_Call struct {
	*mock.Call
}

// LeftDiagonal is a helper method to define mock.On call
func (_e *Steering_Expecter) LeftDiagonal() *Steering_LeftDiagonal_Call {
	return &Steering_LeftDiagonal_Call{Call: _e.mock.On("LeftDiagonal")}
}

func (_c *Steering_LeftDiagonal_Call) Run(run func()) *Steering_LeftDiagonal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Steering_LeftDiagonal_Call) Return() *Steering_LeftDiagonal_Call {
	_c.Call.Return()
	return _c
}

func (_c *Steering_LeftDiagonal_Call) RunAndReturn(run func()) *Steering_LeftDiagonal_Call {
	_c.Call.Return(run)
	return _c
}

// RightDiagonal provides a mock function with given fields:
func (_m *Steering) RightDiagonal() {
	_m.Called()
}

// Steering_RightDiagonal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RightDiagonal'
type Steering_RightDiagonal_Call struct {
	*mock.Call
}

// RightDiagonal is a helper method to define mock.On call
func (_e *Steering_Expecter) RightDiagonal() *Steering_RightDiagonal_Call {
	return &Steering_RightDiagonal_Call{Call: _e.mock.On("RightDiagonal")}
}

func (_c *Steering_RightDiagonal_Call) Run(run func()) *Steering_RightDiagonal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Steering_RightDiagonal_Call) Return() *Steering_RightDiagonal_Call {
	_c.Call.Return()
	return _c
}

func (_c *Steering_RightDiagonal_Call) RunAndReturn(run func()) *Steering_RightDiagonal_Call {
	_c.Call.Return(run)
	return _c
}

// Strait provides a mock function with given fields:
func (_m *Steering) Strait() {
	_m.Called()
}

// Steering_Strait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Strait'
type Steering_Strait_Call struct {
	*mock.Call
}

// Strait is a helper method to define mock.On call
func (_e *Steering_Expecter) Strait() *Steering_Strait_Call {
	return &Steering_Strait_Call{Call: _e.mock.On("Strait")}
}

func (_c *Steering_Strait_Call) Run(run func()) *Steering_Strait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Steering_Strait_Call) Return() *Steering_Strait_Call {
	_c.Call.Return()
	return _c
}

func (_c *Steering_Strait_Call) RunAndReturn(run func()) *Steering_Strait_Call {
	_c.Call.Return(run)
	return _c
}

// NewSteering creates a new instance of Steering. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSteering(t interface {
	mock.TestingT
	Cleanup(func())
}) *Steering {
	mock := &Steering{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
