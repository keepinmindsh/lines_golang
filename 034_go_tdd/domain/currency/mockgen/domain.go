// Code generated by MockGen. DO NOT EDIT.
// Source: 034_go_tdd/domain/currency/domain.go

// Package mock_currency is a generated GoMock package.
package mock_currency

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCurrencyService is a mock of CurrencyService interface.
type MockCurrencyService struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyServiceMockRecorder
}

// MockCurrencyServiceMockRecorder is the mock recorder for MockCurrencyService.
type MockCurrencyServiceMockRecorder struct {
	mock *MockCurrencyService
}

// NewMockCurrencyService creates a new mock instance.
func NewMockCurrencyService(ctrl *gomock.Controller) *MockCurrencyService {
	mock := &MockCurrencyService{ctrl: ctrl}
	mock.recorder = &MockCurrencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyService) EXPECT() *MockCurrencyServiceMockRecorder {
	return m.recorder
}

// CalculateStockWithPrice mocks base method.
func (m *MockCurrencyService) CalculateStockWithPrice(stocks int, price float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateStockWithPrice", stocks, price)
	ret0, _ := ret[0].(float64)
	return ret0
}

// CalculateStockWithPrice indicates an expected call of CalculateStockWithPrice.
func (mr *MockCurrencyServiceMockRecorder) CalculateStockWithPrice(stocks, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateStockWithPrice", reflect.TypeOf((*MockCurrencyService)(nil).CalculateStockWithPrice), stocks, price)
}

// GetPriceWithCurrency mocks base method.
func (m *MockCurrencyService) GetPriceWithCurrency(currency string, price float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceWithCurrency", currency, price)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetPriceWithCurrency indicates an expected call of GetPriceWithCurrency.
func (mr *MockCurrencyServiceMockRecorder) GetPriceWithCurrency(currency, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceWithCurrency", reflect.TypeOf((*MockCurrencyService)(nil).GetPriceWithCurrency), currency, price)
}

// GetSumAllPriceWithStock mocks base method.
func (m *MockCurrencyService) GetSumAllPriceWithStock(arg0 ...float64) float64 {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSumAllPriceWithStock", varargs...)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetSumAllPriceWithStock indicates an expected call of GetSumAllPriceWithStock.
func (mr *MockCurrencyServiceMockRecorder) GetSumAllPriceWithStock(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSumAllPriceWithStock", reflect.TypeOf((*MockCurrencyService)(nil).GetSumAllPriceWithStock), arg0...)
}
